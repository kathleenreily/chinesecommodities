{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (2) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_area</th>\n",
       "      <th>year</th>\n",
       "      <th>comm_code</th>\n",
       "      <th>commodity</th>\n",
       "      <th>flow</th>\n",
       "      <th>trade_usd</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>quantity_name</th>\n",
       "      <th>quantity</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2016</td>\n",
       "      <td>10410</td>\n",
       "      <td>Sheep, live</td>\n",
       "      <td>Export</td>\n",
       "      <td>6088</td>\n",
       "      <td>2339.0</td>\n",
       "      <td>Number of items</td>\n",
       "      <td>51.0</td>\n",
       "      <td>01_live_animals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2016</td>\n",
       "      <td>10420</td>\n",
       "      <td>Goats, live</td>\n",
       "      <td>Export</td>\n",
       "      <td>3958</td>\n",
       "      <td>984.0</td>\n",
       "      <td>Number of items</td>\n",
       "      <td>53.0</td>\n",
       "      <td>01_live_animals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2008</td>\n",
       "      <td>10210</td>\n",
       "      <td>Bovine animals, live pure-bred breeding</td>\n",
       "      <td>Import</td>\n",
       "      <td>1026804</td>\n",
       "      <td>272.0</td>\n",
       "      <td>Number of items</td>\n",
       "      <td>3769.0</td>\n",
       "      <td>01_live_animals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2016</td>\n",
       "      <td>10290</td>\n",
       "      <td>Bovine animals, live, except pure-bred breeding</td>\n",
       "      <td>Import</td>\n",
       "      <td>2414533</td>\n",
       "      <td>1114023.0</td>\n",
       "      <td>Number of items</td>\n",
       "      <td>6853.0</td>\n",
       "      <td>01_live_animals</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albania</td>\n",
       "      <td>2016</td>\n",
       "      <td>10392</td>\n",
       "      <td>Swine, live except pure-bred breeding &gt; 50 kg</td>\n",
       "      <td>Import</td>\n",
       "      <td>14265937</td>\n",
       "      <td>9484953.0</td>\n",
       "      <td>Number of items</td>\n",
       "      <td>96040.0</td>\n",
       "      <td>01_live_animals</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  country_or_area  year comm_code  \\\n",
       "0     Afghanistan  2016     10410   \n",
       "1     Afghanistan  2016     10420   \n",
       "2     Afghanistan  2008     10210   \n",
       "3         Albania  2016     10290   \n",
       "4         Albania  2016     10392   \n",
       "\n",
       "                                         commodity    flow  trade_usd  \\\n",
       "0                                      Sheep, live  Export       6088   \n",
       "1                                      Goats, live  Export       3958   \n",
       "2          Bovine animals, live pure-bred breeding  Import    1026804   \n",
       "3  Bovine animals, live, except pure-bred breeding  Import    2414533   \n",
       "4    Swine, live except pure-bred breeding > 50 kg  Import   14265937   \n",
       "\n",
       "   weight_kg    quantity_name  quantity         category  \n",
       "0     2339.0  Number of items      51.0  01_live_animals  \n",
       "1      984.0  Number of items      53.0  01_live_animals  \n",
       "2      272.0  Number of items    3769.0  01_live_animals  \n",
       "3  1114023.0  Number of items    6853.0  01_live_animals  \n",
       "4  9484953.0  Number of items   96040.0  01_live_animals  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commod_global_df = pd.read_csv('commodity_trade_statistics_data.csv')\n",
    "commod_global_df.head()\n",
    "\n",
    "#for the puposes of this project I will be focussing on country, year, flow, and trade_usd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8225871 entries, 0 to 8225870\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Dtype  \n",
      "---  ------           -----  \n",
      " 0   country_or_area  object \n",
      " 1   year             int64  \n",
      " 2   comm_code        object \n",
      " 3   commodity        object \n",
      " 4   flow             object \n",
      " 5   trade_usd        int64  \n",
      " 6   weight_kg        float64\n",
      " 7   quantity_name    object \n",
      " 8   quantity         float64\n",
      " 9   category         object \n",
      "dtypes: float64(2), int64(2), object(6)\n",
      "memory usage: 627.6+ MB\n"
     ]
    }
   ],
   "source": [
    "commod_global_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Introduction:\n",
    "\n",
    "\n",
    "Currently, given the Covid-19 pandemic of 2020 many developed countries including the United States are beginning to consider whether or not their economies are too reliant on export and manufacturing from China. As a result it is important we consider the history of commodity exports from China, from it's early stage to it's developed and flourishing stage. This is why I will be looking at changes in commodity exports from china in 1996 and then again in 2016. Measuring a 20 year period and quantifying changes by using the value of trade in USD. \n",
    "\n",
    "\n",
    "Hypothesis:\n",
    "\n",
    "\n",
    "Ho: There is no significant relationship between the average USD value of Chinese commodity trades in 1996 and the average USD value of Chinese commodity trades in 2016\n",
    "\n",
    "Ha: There is a significant relationship between the average USD value of Chinese commodity trades in 1996 and the average USD value of Chinese commodity trades in 2016\n",
    "\n",
    "\n",
    "Data:\n",
    "\n",
    "\n",
    "There are 8,225,871 values and 10 columns in the dataset. I found my data in Kaggle, and it was gathered by the UN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8225871, 10)\n"
     ]
    }
   ],
   "source": [
    "print(commod_global_df.shape)\n",
    "\n",
    "#there are 8,225,871 values and 10 variables in this dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([      6088,       3958,    1026804, ..., 1924962432, 2658853376,\n",
       "       1845905792])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commod_global_df['trade_usd'].unique()\n",
    "#I checked to makes sure that all my variables do in fact have the information i need, I will now check for null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_or_area</th>\n",
       "      <th>year</th>\n",
       "      <th>comm_code</th>\n",
       "      <th>commodity</th>\n",
       "      <th>flow</th>\n",
       "      <th>trade_usd</th>\n",
       "      <th>weight_kg</th>\n",
       "      <th>quantity_name</th>\n",
       "      <th>quantity</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8225866</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8225867</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8225868</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8225869</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8225870</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8225871 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         country_or_area   year  comm_code  commodity   flow  trade_usd  \\\n",
       "0                  False  False      False      False  False      False   \n",
       "1                  False  False      False      False  False      False   \n",
       "2                  False  False      False      False  False      False   \n",
       "3                  False  False      False      False  False      False   \n",
       "4                  False  False      False      False  False      False   \n",
       "...                  ...    ...        ...        ...    ...        ...   \n",
       "8225866            False  False      False      False  False      False   \n",
       "8225867            False  False      False      False  False      False   \n",
       "8225868            False  False      False      False  False      False   \n",
       "8225869            False  False      False      False  False      False   \n",
       "8225870            False  False      False      False  False      False   \n",
       "\n",
       "         weight_kg  quantity_name  quantity  category  \n",
       "0            False          False     False     False  \n",
       "1            False          False     False     False  \n",
       "2            False          False     False     False  \n",
       "3            False          False     False     False  \n",
       "4            False          False     False     False  \n",
       "...            ...            ...       ...       ...  \n",
       "8225866       True          False      True     False  \n",
       "8225867       True          False      True     False  \n",
       "8225868       True          False      True     False  \n",
       "8225869       True          False      True     False  \n",
       "8225870       True          False      True     False  \n",
       "\n",
       "[8225871 rows x 10 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "commod_global_df.isnull()\n",
    "\n",
    "#there are no missing values in the variables I will be measuring"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Methods:\n",
    "\n",
    "In order to test the significance of my hypothesis I will begin by creating two variables which I can run against eachother. The first called china_ex_96 denotes Chinese exports in 1996 and the second variable china_exp_16 denotes Chinese exports in 2016. This way I can measure the difference in mean between the value of the trade in USD in 1996 compared to the value of trade in USD in 2016. I combined these three variables, Country, year, and flow, so it would be easier to measure the value of the trade, and the testing process would be cleaner. \n",
    "\n",
    "If the distribution of the histogram for export value in 1996 and 2016 are not normally distributed and skewed based on kurtosis and skewness then I will use a kruskall wallis test to determine p value. Following the wallis test I will determine the difference in means between 1996 and 2016 by finding the 95% confidence interval, as well as the usd value mean for both years. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "china_exp_96 = commod_global_df[(commod_global_df['country_or_area'] == 'China') & \n",
    "                                         (commod_global_df['year'] == 1996) & \n",
    "                                         (commod_global_df['flow'] == 'Export')]\n",
    "china_exp_16 = commod_global_df[(commod_global_df['country_or_area'] == 'China') & \n",
    "                                         (commod_global_df['year'] == 2016) & \n",
    "                                         (commod_global_df['flow'] == 'Export')]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2683 entries, 10226 to 8218492\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   country_or_area  2683 non-null   object \n",
      " 1   year             2683 non-null   int64  \n",
      " 2   comm_code        2683 non-null   object \n",
      " 3   commodity        2683 non-null   object \n",
      " 4   flow             2683 non-null   object \n",
      " 5   trade_usd        2683 non-null   int64  \n",
      " 6   weight_kg        2682 non-null   float64\n",
      " 7   quantity_name    2683 non-null   object \n",
      " 8   quantity         2681 non-null   float64\n",
      " 9   category         2683 non-null   object \n",
      "dtypes: float64(2), int64(2), object(6)\n",
      "memory usage: 230.6+ KB\n",
      "None\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2456 entries, 9772 to 8218436\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   country_or_area  2456 non-null   object \n",
      " 1   year             2456 non-null   int64  \n",
      " 2   comm_code        2456 non-null   object \n",
      " 3   commodity        2456 non-null   object \n",
      " 4   flow             2456 non-null   object \n",
      " 5   trade_usd        2456 non-null   int64  \n",
      " 6   weight_kg        2340 non-null   float64\n",
      " 7   quantity_name    2456 non-null   object \n",
      " 8   quantity         2391 non-null   float64\n",
      " 9   category         2456 non-null   object \n",
      "dtypes: float64(2), int64(2), object(6)\n",
      "memory usage: 211.1+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(china_exp_96.info())\n",
    "print(china_exp_16.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DescribeResult(nobs=2683, minmax=(5, 151047461759), mean=85717851.78941484, variance=8.513877145633314e+18, skewness=51.64608963165021, kurtosis=2669.489820857233)\n",
      "DescribeResult(nobs=2456, minmax=(12, 2097637171895), mean=1161833185.0594463, variance=1.7922369697626343e+21, skewness=49.47823073873035, kurtosis=2447.719166731493)\n"
     ]
    }
   ],
   "source": [
    "# Plot the histogram \n",
    "\n",
    "plt.hist(china_exp_96['trade_usd'], alpha = .5)\n",
    "plt.hist(china_exp_16['trade_usd'], alpha = .5)\n",
    "plt.show()\n",
    "\n",
    "print(stats.describe(china_exp_96['trade_usd']))\n",
    "print(stats.describe(china_exp_16['trade_usd']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KruskalResult(statistic=856.1513478428639, pvalue=3.343920756835248e-188)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.kruskal(\n",
    "    china_exp_96['trade_usd'],\n",
    "    china_exp_16['trade_usd'])\n",
    "\n",
    "#As a result of the test I can see the pvalue is 3.34 and I will therefore reject the null hypothesis stating that\n",
    "#There is no significant relationship between the average quantity of Chinese commodity exports in 1996 \n",
    "#and the average quantity of Chinese commodity exports in 2016\n",
    "#Let's do a confidence test so we can see the difference between our two variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The difference in means at the 95% confidence interval (two-tail) is between -601845517.5408797 and 2754076184.0809426.\n",
      "85717851.78941484\n",
      "1161833185.0594463\n"
     ]
    }
   ],
   "source": [
    "def get_95_ci(array_1, array_2):\n",
    "    sample_1_n = array_1.shape[0]\n",
    "    sample_2_n = array_2.shape[0]\n",
    "    sample_1_mean = array_1.mean()\n",
    "    sample_2_mean = array_2.mean()\n",
    "    sample_1_var = array_1.var()\n",
    "    sample_2_var = array_2.var()\n",
    "    mean_difference = sample_2_mean - sample_1_mean\n",
    "    std_err_difference = math.sqrt((sample_1_var/sample_1_n)+(sample_2_var/sample_2_n))\n",
    "    margin_of_error = 1.96 * std_err_difference\n",
    "    ci_lower = mean_difference - margin_of_error\n",
    "    ci_upper = mean_difference + margin_of_error\n",
    "    return(\"The difference in means at the 95% confidence interval (two-tail) is between \"+str(ci_lower)+\" and \"+str(ci_upper)+\".\")\n",
    "\n",
    "print(get_95_ci(china_exp_96['trade_usd'], china_exp_16['trade_usd']))\n",
    "\n",
    "#what is the average amount spent in USD on exports from China in 1996 and in 2016\n",
    "\n",
    "print(china_exp_96['trade_usd'].mean())\n",
    "print(china_exp_16['trade_usd'].mean())\n",
    "\n",
    "#The 95% confidence interval suggests that the difference in the average sale between the average amount spent \n",
    "#between 1996 and 2016 on Chinese exports is between 601,845,517 and 2,754,076,184 which makes sense given the \n",
    "#mean in 1996 was 85,717,851 and in 2016 the mean on Chinese exports were 1,161,833,185."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Results:\n",
    "\n",
    "Because both variables were highly skewed I did a kruskall wallis test and found the p value was extremely low at 3.3e-188. As a result I was not able to reject the null stating there is no significant relationship between the usd value of Chinese commodity exports in 1996 and in 2016. I then looked at the confidence interval of 95% and found a difference in export values from 1996 to 2016 between 601,845,517 and 2,754,076,184, the value means are accurately reflected in both years. The mean values being, 85,717,851 in year 1996 and 1,161,833,185 in 2016. \n",
    "\n",
    "\n",
    "Discussion and Recommendation:\n",
    "\n",
    "As we can see there was a huge increase in the value of exports from 1996 to 2016, however, I must note that I cannot confirm whether or not the trade_usd data has accounted for inflation. Nevertheless the increase is quite large at 2,152,230,667 usd. In terms of further testing I would recommend looking at the specific export categories to see specifically which Chinese sectors have grown in comparison to others. Perhaps then considering decreasing reliance on the highest growth industries. This could result in economic officials rethinking their policies, and perhaps fostering the growth of similar domestic industries or diversifying international suppliers within these particular sectors. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
